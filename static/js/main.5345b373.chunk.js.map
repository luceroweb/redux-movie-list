{"version":3,"sources":["App.js","redux/actions/movieList.actions.js","services/movieApi.service.js","components/SearchBar.js","components/MovieSearch.js","redux/middleware/logger.js","redux/enhancers/monitorReducerEnhancer.js","redux/reducers/movieList.reducer.js","redux/reducers/index.js","components/Navbar.js","index.js","redux/store.js"],"names":["App","movieList","getMovieList","removeMovieFromList","useEffect","Container","Row","list","map","movie","Col","xs","md","lg","Card","Img","variant","src","Poster","alt","Title","Body","Button","onClick","imdbID","connect","state","movieListReducer","type","payload","apiKey","MovieApiService","title","page","axios","get","then","res","data","catch","err","console","error","id","SearchBar","onSearch","useState","setTitle","Form","inline","onSubmit","e","preventDefault","sm","InputGroup","className","Control","name","placeholder","onChange","target","value","required","MovieSearch","addMovieToList","movieApiService","searchResults","setSearchResults","a","getMoviesByTitle","results","Search","addToMovieList","getMovieById","result","logger","store","next","action","group","info","log","getState","groupEnd","monitorReducerEnhancer","createStore","reducer","initialState","enhancer","number","start","performance","now","newState","end","diff","Math","round","localStorage","getItem","JSON","parse","push","setItem","stringify","updatedList","filter","movieFromList","length","removeItem","rootReducer","combineReducers","Navbar","bg","fixed","expand","Brand","href","width","height","Toggle","Collapse","Nav","Link","ReactDOM","render","preloadedState","middlewares","loggerMiddleware","thunkMiddleware","enhancers","applyMiddleware","composeWithDevTools","configureStore","exact","path","component","document","getElementById"],"mappings":"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","file":"static/js/main.5345b373.chunk.js","sourcesContent":["import { useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getMovieList, removeMovieFromList } from './redux/actions/movieList.actions';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nlet App = ({ movieList, getMovieList, removeMovieFromList  }) => {\r\n\r\n  useEffect(() => {\r\n    getMovieList();\r\n  }, [getMovieList])\r\n\r\n  return (\r\n    <Container>\r\n      <h1>My Movie List</h1>\r\n      <Row>\r\n        {\r\n          movieList && movieList.list && movieList.list.map((movie) => (\r\n            <Col xs={12} md={6} lg={3} key={movie.imdbID}>\r\n              <Card>\r\n                <Card.Img variant=\"top\" src={movie.Poster} alt={`${movie.Title} poster`} />\r\n                <Card.Body>\r\n                  <Card.Title>{ movie.Title }</Card.Title>\r\n                  <Button variant=\"primary\" onClick={() => removeMovieFromList(movie)}>Remove From List</Button>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          ))\r\n        }\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  movieList: state.movieListReducer,\r\n});\r\n\r\nApp = connect(\r\n  mapStateToProps,\r\n  { getMovieList, removeMovieFromList }\r\n)(App)\r\n\r\nexport default App;\r\n","export const getMovieList = () => ( { type: 'GET_MOVIE_LIST' } );\r\nexport const addMovieToList = (payload) => ( { type: 'ADD_MOVIE_TO_LIST', payload: payload } );\r\nexport const removeMovieFromList = (payload) => ( { type: 'REMOVE_MOVIE_FROM_LIST', payload } );","import axios from 'axios';\r\nconst apiKey = '19c7ac68';\r\n\r\nexport default class MovieApiService {\r\n    getMoviesByTitle(title, page = 1) {\r\n        return axios.get(`https://www.omdbapi.com/?s=${title}&page=${page}&apikey=${apiKey}`)\r\n            .then((res) => res.data)\r\n            .catch((err) => console.error(err));\r\n    }\r\n\r\n    getMovieById(id) {\r\n        return axios.get(`https://www.omdbapi.com/?i=${id}&apikey=${apiKey}`)\r\n            .then((res) => res.data)\r\n            .catch((err) => console.error(err));\r\n    }\r\n}","import { useState } from \"react\";\r\nimport Form from 'react-bootstrap/Form';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nconst SearchBar = ({ onSearch }) => {\r\n    const [title, setTitle] = useState();\r\n\r\n    const onFormSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        onSearch(title);\r\n    }\r\n\r\n    return (\r\n        <Form inline onSubmit={onFormSubmit}>\r\n          <Row>\r\n            <Col sm={9}>\r\n              <InputGroup className=\"form-group mb-3\">\r\n                  <Form.Control\r\n                      type=\"text\"\r\n                      id=\"movieTitle\"\r\n                      name=\"movieTitle\"\r\n                      placeholder=\"Search for a movie, show, or episode by name...\"\r\n                      onChange={(e) => setTitle(e.target.value)}\r\n                      required\r\n                  />\r\n              </InputGroup>\r\n            </Col>\r\n            <Col sm={3}>\r\n              <Button type=\"submit\" className=\"w-100 mb-3\">Search</Button>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default SearchBar;","import { useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { addMovieToList } from '../redux/actions/movieList.actions';\r\nimport MovieApiService from '../services/movieApi.service';\r\nimport SearchBar from './SearchBar';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from  'react-bootstrap/Col';\r\nimport Card from 'react-bootstrap/Card';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nlet MovieSearch = ({ addMovieToList }) => {\r\n  const movieApiService = new MovieApiService();\r\n  const [searchResults, setSearchResults] = useState(); \r\n\r\n  const onSearch = async (title) => {\r\n    const results = await movieApiService.getMoviesByTitle(title);\r\n    setSearchResults(results.Search);\r\n  }\r\n\r\n  const addToMovieList = async (id) => {\r\n    const result = await movieApiService.getMovieById(id);\r\n    addMovieToList(result);\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <SearchBar onSearch={onSearch}/>\r\n      <Row>\r\n        {\r\n          searchResults && searchResults.map((movie) => (\r\n            <Col xs={12} md={6} lg={3} key={movie.imdbID}>\r\n              <Card>\r\n                <Card.Img variant=\"top\" src={movie.Poster} alt={`${movie.Title} poster`} />\r\n                <Card.Body>\r\n                  <Card.Title>{ movie.Title }</Card.Title>\r\n                  <Button variant=\"primary\" onClick={() => addToMovieList(movie.imdbID)}>Add To List</Button>\r\n                </Card.Body>\r\n              </Card>\r\n            </Col>\r\n          ))\r\n        }\r\n      </Row>\r\n    </Container>\r\n  )\r\n}\r\n\r\nMovieSearch = connect(\r\n  null,\r\n  { addMovieToList }\r\n)(MovieSearch)\r\n\r\nexport default MovieSearch;","const logger = store => next => action => {\r\n    console.group(action.type)\r\n    console.info('dispatching', action)\r\n    let result = next(action)\r\n    console.log('next state', store.getState())\r\n    console.groupEnd()\r\n    return result\r\n}\r\n  \r\nexport default logger","const round = number => Math.round(number * 100) / 100;\r\n\r\nconst monitorReducerEnhancer =\r\n  createStore => (reducer, initialState, enhancer) => {\r\n    const monitoredReducer = (state, action) => {\r\n      const start = performance.now()\r\n      const newState = reducer(state, action)\r\n      const end = performance.now()\r\n      const diff = round(end - start)\r\n\r\n      console.log('reducer process time:', diff)\r\n\r\n      return newState\r\n    }\r\n\r\n    return createStore(monitoredReducer, initialState, enhancer)\r\n  }\r\n\r\nexport default monitorReducerEnhancer","const initialState = null;\r\n\r\nconst movieListReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case 'GET_MOVIE_LIST': {\r\n            const movieList = localStorage.getItem('movieList');\r\n\r\n            return movieList\r\n                ? JSON.parse(movieList)\r\n                : state;\r\n        }\r\n        case 'ADD_MOVIE_TO_LIST': {\r\n          let movieList = localStorage.getItem('movieList');\r\n          if (movieList) {\r\n            movieList = JSON.parse(movieList);\r\n            movieList.list.push(action.payload);\r\n          } else {\r\n            movieList = { list: [ action.payload ]}\r\n          }\r\n\r\n          localStorage.setItem('movieList', JSON.stringify(movieList));\r\n\r\n          return movieList;\r\n        }\r\n        case 'REMOVE_MOVIE_FROM_LIST': {\r\n          let movieList = localStorage.getItem('movieList');\r\n          movieList = JSON.parse(movieList);\r\n          const updatedList = movieList.list.filter((movieFromList) => movieFromList.imdbID !== action.payload.imdbID);\r\n          if(updatedList.length) {\r\n            movieList.list = updatedList;\r\n            localStorage.setItem('movieList', JSON.stringify(movieList));\r\n          } else {\r\n            localStorage.removeItem('movieList');\r\n          }\r\n\r\n          return movieList;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default movieListReducer;","import { combineReducers } from \"redux\";\r\n\r\nimport movieListReducer from \"./movieList.reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    movieListReducer\r\n});\r\n\r\nexport default rootReducer;","import RBNavbar from 'react-bootstrap/Navbar';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Nav from 'react-bootstrap/Nav';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <RBNavbar bg=\"light\" fixed=\"top\" expand=\"sm\">\r\n          <Container>\r\n            <RBNavbar.Brand href=\"/redux-movie-list/\">\r\n              <img\r\n                src=\"/redux-movie-list/logo192.png\"\r\n                width=\"30\"\r\n                height=\"30\"\r\n                alt=\"\"\r\n                className=\"d-inline-block align-top mr-2\"\r\n              />\r\n              Movie Database\r\n            </RBNavbar.Brand>\r\n            <RBNavbar.Toggle />\r\n              <RBNavbar.Collapse>\r\n                <Nav>\r\n                  <Nav.Link href=\"/redux-movie-list/\">Home</Nav.Link>\r\n                  <Nav.Link href=\"/redux-movie-list/movie-list\">Movie List</Nav.Link>\r\n                </Nav>\r\n              </RBNavbar.Collapse>\r\n          </Container>\r\n        </RBNavbar>\r\n    );\r\n}\r\n\r\nexport default Navbar;","import { Provider } from 'react-redux';\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport MovieSearch from './components/MovieSearch';\r\n\r\nimport configureStore from './redux/store';\r\nimport Navbar from './components/Navbar';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <Provider store={configureStore()}>\r\n    <Router>\r\n      <Navbar/> \r\n      <Switch>\r\n        <Route exact path=\"/redux-movie-list/\" component={MovieSearch} />\r\n        <Route exact path=\"/redux-movie-list/movie-list\" component={App} />\r\n      </Switch>\r\n    </Router>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n","import { applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport loggerMiddleware from './middleware/logger';\r\nimport monitorReducerEnhancer from './enhancers/monitorReducerEnhancer';\r\nimport { createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nexport default function configureStore(preloadedState) {\r\n    const middlewares = [loggerMiddleware, thunkMiddleware];\r\n    const enhancers = [applyMiddleware(...middlewares), monitorReducerEnhancer];\r\n\r\n    return createStore(rootReducer, preloadedState, composeWithDevTools(...enhancers))\r\n}"],"sourceRoot":""}