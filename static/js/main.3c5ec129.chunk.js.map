{"version":3,"sources":["redux/actions/movieList.actions.js","services/movieApi.service.js","components/Movies/MovieDetails.js","components/Modal/index.js","components/Movies/MovieCard.js","components/MovieList.js","components/Lists/CreateNewList.js","components/navigation/Pagination.js","components/navigation/SearchBar.js","components/MovieSearchResults.js","redux/middleware/logger.js","redux/enhancers/monitorReducerEnhancer.js","redux/reducers/movieList.reducer.js","redux/reducers/index.js","components/navigation/Navbar.js","index.js","redux/store.js"],"names":["getMovieList","id","type","getAllMovieLists","addMovieToList","movie","createANewList","name","apiKey","MovieApiService","title","page","axios","get","then","res","data","catch","err","console","error","MovieDetails","imdbID","useState","setMovie","useEffect","movieApiService","a","getMovieById","className","variant","src","Poster","alt","Title","style","width","imdbRating","Rated","Runtime","Genre","Plot","Actors","Modal","modalWrapper","onClose","children","buttons","setTimeout","document","getElementById","classList","add","modalFade","remove","tabIndex","display","onClick","MovieCard","selectedMovie","setSelectedMovie","Card","Img","cursor","Body","Footer","App","movieList","removeMovieFromList","useParams","log","newList","filter","group","parseInt","Container","Row","length","map","movieGroup","list","index","Col","xs","md","lg","Button","href","maxWidth","connect","state","movieListReducer","CreateNewList","onListClose","listName","setListName","movieListNames","setMovieListNames","result","JSON","parse","localStorage","getItem","prompt","marginBottom","selectThisList","marginRight","class","Form","inline","onSubmit","e","preventDefault","sm","InputGroup","Control","placeholder","onChange","target","value","required","Pagination","searchResults","currentPage","setCurrentPage","pageCount","totalResults","Math","ceil","pageCountArr","i","push","count","startingPages","slice","firstThreeDots","Ellipsis","disabled","middlePages","max","min","lastThreeDots","endingPages","buildPageList","arr","Item","limitedPageCount","concat","First","Prev","Next","Last","SearchBar","onSearch","setTitle","MovieSearch","setSearchResults","addToList","setAddToList","runSearch","getMoviesByTitle","results","goToPage","Search","indexOf","logger","store","next","action","info","groupEnd","monitorReducerEnhancer","createStore","reducer","initialState","enhancer","movieLists","getListById","findIndex","setItem","stringify","updatedList","splice","listId","createListId","lists","floor","random","rootReducer","combineReducers","Navbar","history","useHistory","bg","fixed","expand","Brand","as","Link","to","height","Toggle","Collapse","Nav","Array","isArray","NavDropdown","eventKey","options","ReactDOM","render","preloadedState","middlewares","loggerMiddleware","thunkMiddleware","enhancers","applyMiddleware","composeWithDevTools","configureStore","exact","path","component","MovieSearchResults","MovieList"],"mappings":"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","file":"static/js/main.3c5ec129.chunk.js","sourcesContent":["export const getMovieList = (id) => ( { type: 'GET_MOVIE_LIST', id } );\r\nexport const getAllMovieLists = () =>  ( { type: 'GET_ALL_MOVIE_LISTS'} );\r\nexport const addMovieToList = (id, movie) => ( { type: 'ADD_MOVIE_TO_LIST', id, movie } );\r\nexport const removeMovieFromList = (id, movie) => ( { type: 'REMOVE_MOVIE_FROM_LIST', id, movie } );\r\nexport const createANewList = (name, movie) => ( { type: 'CREATE_A_NEW_LIST', name, movie } );","import axios from 'axios';\r\nconst apiKey = '19c7ac68';\r\n\r\nexport default class MovieApiService {\r\n    getMoviesByTitle(title, page = 1) {\r\n        return title ? axios.get(`https://www.omdbapi.com/?s=${title}&page=${page}&apikey=${apiKey}`)\r\n            .then((res) => res.data)\r\n            .catch((err) => console.error(err))\r\n            : null;\r\n    }\r\n\r\n    getMovieById(id) {\r\n        return axios.get(`https://www.omdbapi.com/?i=${id}&apikey=${apiKey}`)\r\n            .then((res) => res.data)\r\n            .catch((err) => console.error(err));\r\n    }\r\n}","import React, { useEffect, useState } from 'react';\r\nimport MovieApiService from '../../services/movieApi.service';\r\n\r\nconst MovieDetails = ({ imdbID }) => {\r\n  const [ movie, setMovie ] = useState();\r\n\r\n  useEffect(() => {\r\n    const movieApiService = new MovieApiService();\r\n    const getMovieById = async (imdbID) => {\r\n      const movie = await movieApiService.getMovieById(imdbID);\r\n      setMovie(movie);\r\n    }\r\n    getMovieById(imdbID);\r\n  },[imdbID]);\r\n\r\n  return movie ? (\r\n    <div className=\"row\">\r\n      <div className=\"col-md-6 text-center\">\r\n        <img\r\n          variant=\"top\"\r\n          src={movie.Poster !== 'N/A' ? movie.Poster : '/redux-movie-list/images/popcornPoster.jpg'}\r\n          alt={`${movie.Title} poster`}\r\n          style={{width:'100%'}}\r\n        />\r\n        {(movie.Poster === 'N/A') ? <span className=\"text-secondary\">No poster avaialble</span> : null }\r\n      </div>\r\n      <div className=\"col-md-6\">\r\n        { movie.imdbRating !== 'N/A' && <strong className=\"float-end text-primary h4\">{movie.imdbRating}</strong> }\r\n        <h4><strong>{movie.Title}</strong></h4>\r\n        { movie.Rated !== 'N/A' && <span className=\"badge bg-secondary m-1\">{movie.Rated}</span> }\r\n        { movie.Runtime !== 'N/A' && <span className=\"badge bg-secondary m-1\">{movie.Runtime}</span> }\r\n        { movie.Genre !== 'N/A' && <span className=\"badge bg-secondary m-1\">{movie.Genre}</span> }\r\n        { movie.Plot !== 'N/A' && \r\n          <p><strong>Plot</strong><br/>\r\n          {movie.Plot}</p>\r\n        }\r\n        { movie.Actors !== 'N/A' && \r\n          <p><strong>Actors</strong><br/>\r\n          {movie.Actors}</p>\r\n        }\r\n      </div>\r\n    </div>\r\n  ) : (<h2>Loading...</h2>);\r\n}\r\n\r\nexport default MovieDetails;","import React from 'react';\r\n\r\nconst Modal = ({ onClose, children, buttons }) => {\r\n  let modalWrapper;\r\n\r\n  setTimeout(() => {\r\n    modalWrapper = document.getElementById('exampleModal');\r\n    modalWrapper.classList.add('show');\r\n  }, 500);\r\n\r\n  const modalFade = () => {\r\n    modalWrapper.classList.remove('show');\r\n    setTimeout(() => onClose(), 500);\r\n  }\r\n\r\n  return (\r\n    <div className=\"modal fade\" id=\"exampleModal\" tabIndex=\"-1\" style={{display: 'block'}}>\r\n      <div className=\"modal-dialog modal-lg modal-dialog-scrollable\">\r\n        <div className=\"modal-content p-0\">\r\n          <div className=\"modal-header\">\r\n            <button type=\"button\" className=\"btn-close\" data-bs-dismiss=\"modal\" aria-label=\"Close\" onClick={modalFade}></button>\r\n          </div>\r\n          <div className=\"modal-body\">\r\n          {children}\r\n          </div>\r\n          <div className=\"modal-footer\">\r\n            {buttons}\r\n            <button type=\"button\" className=\"btn btn-secondary\" data-bs-dismiss=\"modal\" onClick={modalFade}>Close</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Modal;","import MovieDetails from './MovieDetails';\r\nimport Modal from '../Modal';\r\nimport Card from 'react-bootstrap/Card';\r\n\r\nconst MovieCard = ({ movie, buttons, onClose, selectedMovie, setSelectedMovie }) => {\r\n\r\n  return (\r\n    <div className=\"h-100\">\r\n      <Card className=\"h-100\">\r\n        <Card.Img\r\n          variant=\"top\"\r\n          src={movie.Poster !== 'N/A' ? movie.Poster : '/redux-movie-list/images/popcornPoster.jpg'}\r\n          alt={`${movie.Title} poster`}\r\n          onClick={() => setSelectedMovie(movie.imdbID)} style={{cursor:'pointer'}}\r\n        />\r\n        <Card.Body className=\"pb-0\">\r\n          <Card.Title>{ movie.Title }</Card.Title>\r\n        </Card.Body>\r\n        <Card.Footer className=\"bg-white border-0 pt-0 pb-3\">\r\n          { buttons }\r\n        </Card.Footer>\r\n      </Card>\r\n      { selectedMovie === movie.imdbID &&\r\n        <Modal\r\n          title={movie.Title}\r\n          onClose={onClose}\r\n          buttons={buttons}\r\n          children={ <MovieDetails imdbID={selectedMovie} /> }\r\n        />\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default MovieCard;","import { useState, useEffect } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { getMovieList, removeMovieFromList } from '../redux/actions/movieList.actions';\r\nimport MovieCard from './Movies/MovieCard';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nlet App = ({ movieList, getMovieList, removeMovieFromList  }) => {\r\n  const [ selectedMovie, setSelectedMovie ] = useState(null);\r\n\r\n  let { id } = useParams();\t\r\n  console.log(\"ID:\", id);\t\r\n  console.log(\"ALL MOVIES\", movieList);\t\r\n  let newList = movieList?.filter((group) => group.id === parseInt(id) );\r\n\r\n  useEffect(() => {\r\n    getMovieList();\r\n  }, [getMovieList]);\r\n\r\n  const onClose = () => setSelectedMovie(null);\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        { newList?.length && id\r\n          ? newList.map((movieGroup) => (\r\n            movieGroup.list.map((movie, index) => (\r\n              <Col xs={12} md={6} lg={3} key={movie.imdbID} className=\"mb-4\">\r\n                <h4>{movieGroup.name}</h4>\r\n                <MovieCard\r\n                  movie={movie}\r\n                  movieList={movieList}\r\n                  onClose={onClose}\r\n                  selectedMovie={selectedMovie}\r\n                  setSelectedMovie={setSelectedMovie}\r\n                  key={index}\r\n                  buttons={\r\n                    <Button\r\n                      variant=\"danger\"\r\n                      onClick={() => removeMovieFromList(movieGroup.id, movie)}\r\n                    >\r\n                      <i className=\"bi bi-bookmark-dash-fill\"></i>&nbsp;\r\n                      Remove From List\r\n                    </Button>\r\n                  }\r\n                />\r\n              </Col>\r\n            ))\r\n          ))\r\n          : <Row>\r\n              <Col className=\"text-center\">\r\n                <p className=\"text-secondary\">\r\n                  You haven't added any movies yet. <br />\r\n                  First <a href=\"/redux-movie-list/\">search for a movie</a>, then click \"Add To List\".\r\n                </p>\r\n                <img src=\"/redux-movie-list/images/popcornPoster.jpg\" alt=\"\" style={{maxWidth:'300px'}} />\r\n              </Col>\r\n            </Row>\r\n        }\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  movieList: state.movieListReducer,\r\n});\r\n\r\nApp = connect(\r\n  mapStateToProps,\r\n  { getMovieList, removeMovieFromList }\r\n)(App)\r\n\r\nexport default App;","import { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { createANewList, getAllMovieLists, addMovieToList } from '../../redux/actions/movieList.actions';\r\nimport Form from 'react-bootstrap/Form';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nlet CreateNewList = ({ movie, onListClose, createANewList, getAllMovieLists, addMovieToList }) => {\r\n  const [listName, setListName] = useState();\r\n  const [movieListNames, setMovieListNames] = useState([]);\r\n\r\n  const selectThisList = (id, movie) => {\r\n    addMovieToList(id, movie);\r\n    onListClose();\r\n  }\r\n\r\n  useEffect(() => {\r\n    const result = JSON.parse(localStorage.getItem('movieLists'));\r\n    if (result){\r\n      setMovieListNames(result);\r\n    } else {\r\n      setMovieListNames([]);\r\n    }\r\n\r\n  },[]);\r\n\r\n  const onFormSubmit = (e) => {\r\n    createANewList(listName, movie);\r\n    e.preventDefault();\r\n    onListClose();\r\n  }\r\n\r\n  let prompt;\r\n  if (movieListNames.length > 0) {\r\n    prompt = <h4>Click on a list name to add it to that name, or create a new list</h4>;\r\n  } else {\r\n    prompt = <h4>No lists are available, create a new list</h4>;\r\n  }\r\n  return movieListNames\r\n    ? (\r\n      <Container>\r\n        <Row>\r\n          {prompt}\r\n        </Row>\r\n        <Row>\r\n        <Col style={{marginBottom:\"1em\"}}>\r\n          { movieListNames.map((list, index) => (\r\n\r\n                <Button\r\n                  variant=\"warning\"\r\n                  key={index}\r\n                  onClick={() => selectThisList(list.id, movie)}\r\n                  style={{marginRight: \"1em\"}}\r\n                >\r\n                  <i class=\"bi bi-card-list\"></i> {list.name}\r\n                </Button>\r\n              ))\r\n          }\r\n        </Col>\r\n        </Row>\r\n        <Form inline onSubmit={onFormSubmit}>\r\n          <Row>\r\n            <Col sm={9}>\r\n              <InputGroup className=\"form-group mb-3\">\r\n                  <Form.Control\r\n                      type=\"text\"\r\n                      id=\"listName\"\r\n                      name=\"listName\"\r\n                      placeholder=\"Enter a list name\"\r\n                      onChange={(e) => setListName(e.target.value)}\r\n                      required\r\n                  />\r\n              </InputGroup>\r\n            </Col>\r\n            <Col sm={3}>\r\n              <Button type=\"submit\" className=\"w-100 mb-3\">Create New List</Button>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n      </Container>\r\n  ) : null\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  getAllMovieLists: state.movieListReducer,\r\n});\r\n\r\nCreateNewList = connect(\r\n  mapStateToProps,\r\n  { createANewList, getAllMovieLists, addMovieToList }\r\n)(CreateNewList);\r\n\r\nexport default CreateNewList;","import BSPagination from 'react-bootstrap/Pagination';\r\n\r\nexport const Pagination = ({ searchResults, currentPage, setCurrentPage }) => {\r\n  // convert page count to array\r\n  const pageCount = (searchResults.totalResults) ? Math.ceil(searchResults.totalResults / 10) : [];\r\n  const pageCountArr = [];\r\n  for(let i = 0; i < pageCount; i++){\r\n    pageCountArr.push({ count: i+1 })\r\n  }\r\n\r\n  // Build pagination options\r\n  const startingPages = pageCountArr.slice(0, 2);\r\n\r\n  const firstThreeDots = (currentPage > 3) ? [<BSPagination.Ellipsis disabled key=\"firstThreeDots\" />] : [];\r\n\r\n  const middlePages = (currentPage > 0) ? \r\n    pageCountArr.slice(Math.max(currentPage - 2,2), Math.min(currentPage + 1,pageCount - 2)) \r\n    : [];\r\n\r\n  const lastThreeDots = (currentPage < pageCount-2) ? [<BSPagination.Ellipsis disabled key=\"lastThreeDots\" />] : [];\r\n\r\n  const endingPages = pageCountArr.slice(-2);\r\n\r\n  // Build pagination buttons\r\n  const buildPageList = (arr) => {\r\n    return arr.map(({count}) => (\r\n      <BSPagination.Item\r\n        key={count}\r\n        disabled={count === currentPage}\r\n        onClick={() => setCurrentPage(count)}\r\n      >\r\n        {count}\r\n      </BSPagination.Item>\r\n    ))\r\n  }\r\n\r\n  let limitedPageCount = [].concat(\r\n    buildPageList(startingPages),\r\n    firstThreeDots,\r\n    buildPageList(middlePages),\r\n    lastThreeDots,\r\n    buildPageList(endingPages),\r\n  );\r\n\r\n  return (\r\n    <div>\r\n      { (pageCount > 1) &&\r\n        <BSPagination className=\"justify-content-center\">\r\n          <BSPagination.First key=\"first\" disabled={currentPage === 1} onClick={() => setCurrentPage(1)} />\r\n          <BSPagination.Prev key=\"previous\" disabled={currentPage === 1} onClick={() => setCurrentPage(currentPage - 1)} />\r\n          <BSPagination.Item disabled>Page {currentPage} of {pageCount}</BSPagination.Item>\r\n          <BSPagination.Next key=\"next\" disabled={currentPage === pageCount} onClick={() => setCurrentPage(currentPage + 1)} />\r\n          <BSPagination.Last key=\"last\" disabled={currentPage === pageCount} onClick={() => setCurrentPage(pageCount)} />\r\n        </BSPagination>\r\n      }\r\n      { (pageCount > 1) &&\r\n        <BSPagination className=\"justify-content-center\">\r\n          { pageCount > 7 ? limitedPageCount : buildPageList(pageCountArr) }\r\n        </BSPagination>\r\n      }\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Pagination;","import Form from 'react-bootstrap/Form';\r\nimport InputGroup from 'react-bootstrap/InputGroup';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\n\r\nconst SearchBar = ({ onSearch, setTitle }) => {\r\n\r\n    const onFormSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        onSearch();\r\n    }\r\n\r\n    return (\r\n        <Form inline onSubmit={onFormSubmit}>\r\n          <Row>\r\n            <Col sm={9}>\r\n              <InputGroup className=\"form-group mb-3\">\r\n                  <Form.Control\r\n                      type=\"text\"\r\n                      id=\"movieTitle\"\r\n                      name=\"movieTitle\"\r\n                      placeholder=\"Search for a movie, show, or episode by name...\"\r\n                      onChange={(e) => setTitle(e.target.value)}\r\n                      required\r\n                  />\r\n              </InputGroup>\r\n            </Col>\r\n            <Col sm={3}>\r\n              <Button type=\"submit\" className=\"w-100 mb-3\">Search</Button>\r\n            </Col>\r\n          </Row>\r\n        </Form>\r\n    )\r\n}\r\n\r\nexport default SearchBar;","import { useState, useEffect } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { getMovieList, addMovieToList, createANewList } from '../redux/actions/movieList.actions';\r\nimport Modal from './Modal';\r\nimport CreateNewList from './Lists/CreateNewList';\r\nimport MovieApiService from '../services/movieApi.service';\r\nimport Pagination from './navigation/Pagination';\r\nimport SearchBar from './navigation/SearchBar';\r\nimport MovieCard from './Movies/MovieCard';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from  'react-bootstrap/Col';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nlet MovieSearch = ({ movieList, getMovieList, addMovieToList, createANewList }) => {\r\n  const movieApiService = new MovieApiService();\r\n  const [ searchResults, setSearchResults ] = useState();\r\n  const [ title, setTitle ] = useState();\r\n  const [ currentPage, setCurrentPage ] = useState(1);\r\n  const [ selectedMovie, setSelectedMovie ] = useState(null);\r\n  const [ addToList, setAddToList ] = useState(null);\r\n\r\n  useEffect(() => {\r\n    getMovieList();\r\n  }, [getMovieList]);\r\n\r\n  const runSearch = async () => {\r\n    const results = await movieApiService.getMoviesByTitle(title,currentPage);\r\n    setSearchResults(results);\r\n  }\r\n\r\n  const onSearch = async () => {\r\n    if(title) {\r\n      setCurrentPage(1);\r\n      return await runSearch();\r\n    }\r\n    return [];\r\n  }\r\n\r\n  const goToPage = async (page) => {\r\n    setCurrentPage(page);\r\n    runSearch();\r\n  }\r\n\r\n  const createOrSelectMovieList = (id) => {\t\r\n    setAddToList(id);\t\r\n  }\r\n\r\n  const onClose = () => setSelectedMovie(null);\r\n\r\n  const onListClose = () => setAddToList(null);\r\n\r\n  return (\r\n    <Container>\r\n      <SearchBar onSearch={onSearch} setTitle={setTitle} />\r\n        { searchResults\r\n          ? <>\r\n            <Row>\r\n              { searchResults.Search.map((movie,index,movieList) => (\r\n                <Col xs={12} md={6} lg={3} key={movie.imdbID} className=\"mb-4\">\r\n                  <MovieCard\r\n                    movie={movie}\r\n                    movieList={movieList}\r\n                    onClose={onClose}\r\n                    selectedMovie={selectedMovie}\r\n                    setSelectedMovie={setSelectedMovie}\r\n                    key={index}\r\n                    buttons={movieList.list?.indexOf(movie.imdbID)\t\r\n                      ?\t\r\n                        <Button variant=\"primary\">\t\r\n                          <i className=\"bi bi-bookmark-plus\"></i>&nbsp;\t\r\n                          In Movie List\t\r\n                        </Button>\t\r\n                      :                        <Button variant=\"success\" onClick={() => createOrSelectMovieList(movie.imdbID)}>\t\r\n                          <i className=\"bi bi-bookmark-plus\"></i>&nbsp;\t\r\n                          Add to list\t\r\n                        </Button>\r\n                    }\r\n                  />\r\n                  { addToList === movie.imdbID &&\t\r\n                    <Modal\t\r\n                      movie={movie}\t\r\n                      onClose={onListClose}\t\r\n                      children={ \r\n                        <CreateNewList\r\n                          movie={movie}\r\n                          onListClose={onListClose}\r\n                        /> \r\n                      }\t\r\n                    />\t\r\n                  }\r\n                </Col>\r\n              ))}\r\n            </Row>\r\n            <Row>\r\n              <Col>\r\n                <Pagination searchResults={searchResults} currentPage={currentPage} setCurrentPage={goToPage} />\r\n              </Col>\r\n            </Row>\r\n          </>\r\n          : <Row>\r\n              <Col className=\"text-center\">\r\n              <p className=\"text-secondary\">Use the search bar above to begin</p>\r\n              <img src=\"/redux-movie-list/images/popcornPoster.jpg\" alt=\"\" style={{maxWidth:'300px'}} />\r\n            </Col>\r\n          </Row>\r\n        }\r\n    </Container>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  movieList: state.movieListReducer,\r\n});\r\n\r\nMovieSearch = connect(\r\n  mapStateToProps,\r\n  { getMovieList, addMovieToList, createANewList }\r\n)(MovieSearch)\r\n\r\nexport default MovieSearch;","const logger = store => next => action => {\r\n    console.group(action.type)\r\n    console.info('dispatching', action)\r\n    let result = next(action)\r\n    console.groupEnd()\r\n    return result\r\n}\r\n  \r\nexport default logger","// const round = number => Math.round(number * 100) / 100;\r\n\r\nconst monitorReducerEnhancer =\r\n  createStore => (reducer, initialState, enhancer) => {\r\n    const monitoredReducer = (state, action) => {\r\n      // const start = performance.now()\r\n      const newState = reducer(state, action)\r\n      // const end = performance.now()\r\n      // const diff = round(end - start)\r\n\r\n      return newState\r\n    }\r\n\r\n    return createStore(monitoredReducer, initialState, enhancer)\r\n  }\r\n\r\nexport default monitorReducerEnhancer","const initialState = null;\r\n\r\nconst movieListReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case 'GET_MOVIE_LIST': {\r\n            let movieLists = localStorage.getItem('movieLists');\r\n\r\n            return movieLists ? JSON.parse(movieLists) : state;\r\n        }\r\n        case 'GET_ALL_MOVIE_LISTS': {\r\n          let movieLists = localStorage.getItem('movieLists');\r\n          return movieLists ? JSON.parse(movieLists) : state\r\n        }\r\n        case 'ADD_MOVIE_TO_LIST': {\r\n          debugger;\r\n          let movieLists = JSON.parse(localStorage.getItem('movieLists'));\r\n          let movieList = getListById(movieLists, action.id)\r\n          movieList.list.push(action.movie)\r\n\r\n          const index = movieLists.findIndex(group => group.id === action.id);\r\n          movieLists[index] = movieList;\r\n\r\n          localStorage.setItem('movieLists', JSON.stringify(movieLists));\r\n\r\n          return movieLists;\r\n        }\r\n        case 'REMOVE_MOVIE_FROM_LIST': {\r\n          let movieLists = localStorage.getItem('movieLists');\r\n          movieLists = JSON.parse(movieLists);\r\n\r\n          let group = getListById(movieLists, action.id)\r\n\r\n          const updatedList = group.list.filter((movieList) => movieList.imdbID !== action.movie.imdbID);\r\n          const index = movieLists.findIndex(movieLists => movieLists.id === action.id);\r\n\r\n          if (updatedList.length > 0 ){\r\n            movieLists[index].list = updatedList;\r\n          } else {\r\n            movieLists.splice(index, 1); // remove list\r\n          }\r\n\r\n          localStorage.setItem('movieLists', JSON.stringify(movieLists));\r\n\r\n          return movieLists ? movieLists : null;\r\n        }\r\n        case 'CREATE_A_NEW_LIST': {\r\n          let movieLists = localStorage.getItem('movieLists');\r\n          let movieList = {};\r\n          let listId = createListId();\r\n\r\n          movieLists = JSON.parse(movieLists);\r\n\r\n          if (!movieLists){\r\n            movieLists = []; // create an array\r\n          }\r\n\r\n          movieList = {\r\n            id: listId,\r\n            name: action.name,\r\n            list: [action.movie]\r\n          }\r\n\r\n          movieLists.push(movieList);\r\n          localStorage.setItem('movieLists', JSON.stringify(movieLists));\r\n\r\n          return movieLists;\r\n        }\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default movieListReducer;\r\n\r\nconst getListById = (lists, listId) => lists.filter((list) => list.id === listId)[0];\r\n\r\nconst createListId = () => {\r\n    return Math.floor(Math.random() * 101);\r\n  }","import { combineReducers } from \"redux\";\r\n\r\nimport movieListReducer from \"./movieList.reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    movieListReducer\r\n});\r\n\r\nexport default rootReducer;","import { connect } from 'react-redux';\r\nimport RBNavbar from 'react-bootstrap/Navbar';\r\nimport Container from 'react-bootstrap/Container';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport NavDropdown from 'react-bootstrap/NavDropdown';\r\nimport { Link } from 'react-router-dom';\r\nimport { getAllMovieLists } from '../../redux/actions/movieList.actions';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\nlet Navbar = ({getAllMovieLists}) => {\r\n  const movieLists = JSON.parse(localStorage.getItem('movieLists'));\r\n  let history = useHistory();\r\n\r\n  const redirect = (id) => {\r\n    history.push('/movie-list/'+id);\r\n  }\r\n\r\n  const options = (movieLists) => {\r\n    if (Array.isArray(movieLists)){\r\n      return (\r\n        <>\r\n          { movieLists &&\r\n            movieLists.map((movieGroup) => (\r\n              <NavDropdown.Item\r\n                eventKey={movieGroup.id}\r\n                onClick={() => redirect(movieGroup.id)}\r\n              >\r\n                {movieGroup.name}\r\n              </NavDropdown.Item>\r\n            ))\r\n          }\r\n        </>\r\n      )\r\n    } else {\r\n      return <></>\r\n    }\r\n  }\r\n\r\n  return (\r\n    <RBNavbar bg=\"light\" fixed=\"top\" expand=\"sm\">\r\n      <Container>\r\n        <RBNavbar.Brand as={Link} to=\"/\">\r\n          <img\r\n            src=\"/redux-movie-list/logo192.png\"\r\n            width=\"30\"\r\n            height=\"30\"\r\n            alt=\"\"\r\n            className=\"d-inline-block align-top mr-2\"\r\n          />\r\n          Movie Database\r\n        </RBNavbar.Brand>\r\n        <RBNavbar.Toggle />\r\n        <RBNavbar.Collapse>\r\n          <Nav>\r\n            <Nav.Link as={Link} to=\"/\">Home</Nav.Link>\r\n            { Array.isArray(movieLists) && movieLists.length\r\n              ?\r\n                <NavDropdown title=\"Movie List\" id=\"nav-dropdown\">\r\n                { options(movieLists) }\r\n                </NavDropdown>\r\n              :\r\n              null\r\n            }\r\n          </Nav>\r\n        </RBNavbar.Collapse>\r\n      </Container>\r\n    </RBNavbar>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  movieList: state.movieListReducer,\r\n});\r\n\r\nNavbar = connect(\r\n  mapStateToProps,\r\n  { getAllMovieLists }\r\n)(Navbar)\r\n\r\nexport default Navbar;","import { Provider } from 'react-redux';\r\nimport { HashRouter, Switch, Route } from 'react-router-dom';\r\nimport ReactDOM from 'react-dom';\r\nimport MovieList from './components/MovieList';\r\nimport MovieSearchResults from './components/MovieSearchResults';\r\n\r\nimport configureStore from './redux/store';\r\nimport Navbar from './components/navigation/Navbar';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <Provider store={configureStore()}>\r\n    <HashRouter>\r\n      <Navbar/> \r\n      <Switch>\r\n        <Route exact path=\"/\" component={MovieSearchResults} />\r\n        <Route path=\"/movie-list/:id\" component={MovieList} />\r\n      </Switch>\r\n    </HashRouter>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n","import { applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\n\r\nimport loggerMiddleware from './middleware/logger';\r\nimport monitorReducerEnhancer from './enhancers/monitorReducerEnhancer';\r\nimport { createStore } from 'redux';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nimport rootReducer from './reducers';\r\n\r\nexport default function configureStore(preloadedState) {\r\n    const middlewares = [loggerMiddleware, thunkMiddleware];\r\n    const enhancers = [applyMiddleware(...middlewares), monitorReducerEnhancer];\r\n\r\n    return createStore(rootReducer, preloadedState, composeWithDevTools(...enhancers))\r\n}"],"sourceRoot":""}